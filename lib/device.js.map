{"version":3,"sources":["device.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAEF,qCAAqD;AAErD;IAgBI,YAAY,IAA+B;QAdpC,YAAO,GAAW,IAAI,CAAC;QACvB,qBAAgB,GAAkB,EAAE,CAAC;QACrC,OAAE,GAAW,SAAS,CAAC;QACvB,SAAI,GAAW,IAAI,CAAC;QAC3B,mBAAmB;QACnB,+BAA+B;QAC/B,4BAA4B;QAC5B,oBAAoB;QACpB,mCAAmC;QACnC,8BAA8B;QAC9B,IAAI;QACG,SAAI,GAA8B,IAAI,kCAAyB,EAAE,CAAC;QAClE,UAAK,GAAkB,EAAE,CAAC;QAG7B,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IAC5B,CAAC;CACJ;AAzBD,0CAyBC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BE","file":"device.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { BluetoothRemoteGATTServer } from \"./server\";\n\nexport class BluetoothDevice {\n\n    public _handle: string = null;\n    public _allowedServices: Array<string> = [];\n    public id: string = \"unknown\";\n    public name: string = null;\n    // public adData: {\n    //    public appearance?: null;\n    //    public txPower?: null;\n    //    rssi?: number;\n    //    manufacturerData = new Map();\n    //    serviceData = new Map();\n    // }\n    public gatt: BluetoothRemoteGATTServer = new BluetoothRemoteGATTServer();\n    public uuids: Array<string> = [];\n\n    constructor(init?: Partial<BluetoothDevice>) {\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n\n        this.gatt.device = this;\n    }\n}\n\n/*\n    // BluetoothDevice Object\n    var BluetoothDevice = function(properties) {\n        this._handle = null;\n        this._allowedServices = [];\n\n        this.id = \"unknown\";\n        this.name = null;\n        this.adData = {\n            appearance: null,\n            txPower: null,\n            rssi: null,\n            manufacturerData: new Map(),\n            serviceData: new Map()\n        };\n        this.gatt = new BluetoothRemoteGATTServer();\n        this.gatt.device = this;\n        this.uuids = [];\n\n        mergeDictionary(this, properties);\n    };\n    BluetoothDevice.prototype.addEventListener = createListenerFn([\n        \"gattserverdisconnected\",\n    ]);\n    BluetoothDevice.prototype.removeEventListener = removeEventListener;\n    BluetoothDevice.prototype.dispatchEvent = dispatchEvent;\n*/\n"],"sourceRoot":"../src"}