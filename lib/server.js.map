{"version":3,"sources":["server.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAIF;IAAA;QACW,cAAS,GAAkB,IAAI,CAAC;QAChC,WAAM,GAAoB,IAAI,CAAC;QAC/B,cAAS,GAAY,KAAK,CAAC;IACtC,CAAC;CAAA;AAJD,8DAIC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+DE","file":"server.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { BluetoothDevice } from \"./device\";\n\nexport class BluetoothRemoteGATTServer {\n    public _services: Array<string> = null;\n    public device: BluetoothDevice = null;\n    public connected: boolean = false;\n}\n\n/*\n    // BluetoothRemoteGATTServer Object\n    var BluetoothRemoteGATTServer = function() {\n        this._services = null;\n\n        this.device = null;\n        this.connected = false;\n    };\n    BluetoothRemoteGATTServer.prototype.connect = function() {\n        return new Promise(function(resolve, reject) {\n            if (this.connected) return reject(\"connect error: device already connected\");\n\n            adapter.connect(this.device._handle, function() {\n                this.connected = true;\n                resolve(this);\n            }.bind(this), function() {\n                this._services = null;\n                this.connected = false;\n                this.device.dispatchEvent({ type: \"gattserverdisconnected\", bubbles: true });\n            }.bind(this), wrapReject(reject, \"connect error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTServer.prototype.disconnect = function() {\n        adapter.disconnect(this.device._handle);\n        this.connected = false;\n    };\n    BluetoothRemoteGATTServer.prototype.getPrimaryService = function(serviceUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.connected) return reject(\"getPrimaryService error: device not connected\");\n            if (!serviceUUID) return reject(\"getPrimaryService error: no service specified\");\n\n            this.getPrimaryServices(serviceUUID)\n            .then(function(services) {\n                if (services.length !== 1) return reject(\"getPrimaryService error: service not found\");\n                resolve(services[0]);\n            })\n            .catch(function(error) {\n                reject(error);\n            });\n        }.bind(this));\n    };\n    BluetoothRemoteGATTServer.prototype.getPrimaryServices = function(serviceUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.connected) return reject(\"getPrimaryServices error: device not connected\");\n\n            function complete() {\n                if (!serviceUUID) return resolve(this._services);\n                var filtered = this._services.filter(function(service) {\n                    return (service.uuid === helpers.getServiceUUID(serviceUUID));\n                });\n                if (filtered.length !== 1) return reject(\"getPrimaryServices error: service not found\");\n                resolve(filtered);\n            }\n            if (this._services) return complete.call(this);\n            adapter.discoverServices(this.device._handle, this.device._allowedServices, function(services) {\n                this._services = services.map(function(serviceInfo) {\n                    serviceInfo.device = this.device;\n                    return new BluetoothRemoteGATTService(serviceInfo);\n                }.bind(this));\n                complete.call(this);\n            }.bind(this), wrapReject(reject, \"getPrimaryServices error\"));\n        }.bind(this));\n    };\n*/\n"],"sourceRoot":"../src"}