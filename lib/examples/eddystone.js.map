{"version":3,"sources":["examples/eddystone.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoHE","file":"eddystone.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/*\nvar bluetooth = require('../index').webbluetooth;\nvar helpers = require('../index').helpers;\nvar eddystoneUUID = 0xFEAA;\n\nvar frameTypes = {\n    \"UID\": 0x00,\n    \"URL\": 0x10,\n    \"TLM\": 0x20\n}\n\nvar schemes = {\n    0x00: \"http://www.\",\n    0x01: \"https://www.\",\n    0x02: \"http://\",\n    0x03: \"https://\"\n}\n\nvar expansions = {\n    0x00: \".com/\",\n    0x01: \".org/\",\n    0x02: \".edu/\",\n    0x03: \".net/\",\n    0x04: \".info/\",\n    0x05: \".biz/\",\n    0x06: \".gov/\",\n    0x07: \".com\",\n    0x08: \".org\",\n    0x09: \".edu\",\n    0x0a: \".net\",\n    0x0b: \".info\",\n    0x0c: \".biz\",\n    0x0d: \".gov\"\n}\n\nfunction decodeEddystone(view) {\n    var type = view.getUint8(0);\n    if (typeof type === \"undefined\") return null;\n\n    if (type === frameTypes.UID) {\n        var uidArray = [];\n        for (var i = 2; i < view.byteLength; i++) {\n            var hex = view.getUint8(i).toString(16);\n            uidArray.push((\"00\" + hex).slice(-2));\n        }\n        return {\n            type: type,\n            txPower: view.getInt8(1),\n            namespace: uidArray.slice(0, 10).join(),\n            instance: uidArray.slice(10, 16).join()\n        };\n    }\n\n    if (type === frameTypes.URL) {\n        var url = \"\";\n        for (var i = 2; i < view.byteLength; i++) {\n            if (i === 2) {\n                url += schemes[view.getUint8(i)];\n            } else {\n                url += expansions[view.getUint8(i)] || String.fromCharCode(view.getUint8(i));\n            }\n        }\n        return {\n            type: type,\n            txPower: view.getInt8(1),\n            url: url\n        };\n    }\n\n    if (type === frameTypes.TLM) {\n        return {\n            type: type,\n            version: view.getUint8(1),\n            battery: view.getUint16(2),\n            temperature: view.getInt16(4),\n            advCount: view.getUint32(6),\n            secCount: view.getUint32(10)\n        };\n    }\n}\n\nfunction handleDeviceFound(bluetoothDevice) {\n    var uuid = helpers.getServiceUUID(eddystoneUUID);\n    var eddyData = bluetoothDevice.adData.serviceData.get(uuid);\n    if (eddyData) {\n        var decoded = decodeEddystone(eddyData);\n        if (decoded) {\n            switch(decoded.type) {\n                case frameTypes.UID:\n                    console.log(\"txPower: \" + decoded.txPower);\n                    break;\n                case frameTypes.URL:\n                    console.log(\"url: \" + decoded.url);\n                    break;\n                case frameTypes.TLM:\n                    console.log(\"version: \" + decoded.version);\n                    break;\n            }\n        }\n    }\n}\n\n// Recursively scan\nfunction scan() {\n    console.log(\"scanning...\");\n    bluetooth.requestDevice({\n        filters:[{ services:[ eddystoneUUID ] }],\n        deviceFound: handleDeviceFound\n    })\n    .then(scan)\n    .catch(error => {\n        console.log(error);\n        process.exit();\n    });\n}\nscan();\n*/\n"],"sourceRoot":"../../src"}