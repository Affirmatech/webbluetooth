{"version":3,"sources":["examples/selector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8FE","file":"selector.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/*\nvar bluetooth = require('../index').webbluetooth;\nvar bluetoothDevices = [];\n\nfunction logError(error) {\n    console.log(error);\n    process.exit();\n}\n\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('readable', () => {\n    var input = process.stdin.read();\n    if (input === '\\u0003') {\n        process.exit();\n    } else {\n        var index = parseInt(input);\n        if (index && index <= bluetoothDevices.length) {\n            process.stdin.setRawMode(false);\n            selectDevice(index - 1);\n        }\n    }\n});\n\nfunction enumerateGatt(server) {\n    return server.getPrimaryServices()\n    .then(services => {\n        var sPromises = services.map(service => {\n            return service.getCharacteristics()\n            .then(characteristics => {\n                var cPromises = characteristics.map(characteristic => {\n                    return characteristic.getDescriptors()\n                    .then(descriptors => {\n                        descriptors = descriptors.map(descriptor => `\\t\\t└descriptor: ${descriptor.uuid}`);\n                        descriptors.unshift(`\\t└characteristic: ${characteristic.uuid}`);\n                        return descriptors.join(\"\\n\");\n                    });\n                });\n\n                return Promise.all(cPromises)\n                .then(descriptors => {\n                    descriptors.unshift(`service: ${service.uuid}`);\n                    return descriptors.join(\"\\n\");\n                });\n            });\n        });\n\n        return Promise.all(sPromises)\n        .then(services => {\n            console.log(services.join(\"\\n\"));\n        });\n    });\n}\n\nfunction handleDeviceFound(bluetoothDevice, selectFn) {\n    var discovered = bluetoothDevices.some(device => {\n        return (device.id === bluetoothDevice.id);\n    });\n    if (discovered) return;\n\n    if (bluetoothDevices.length === 0) {\n        process.stdin.setRawMode(true);\n        console.log(\"select a device:\");\n    }\n\n    bluetoothDevices.push({ id: bluetoothDevice.id, select: selectFn });\n    console.log(bluetoothDevices.length + \": \" + bluetoothDevice.name);\n}\n\nfunction selectDevice(index) {\n    var device = bluetoothDevices[index];\n    device.select();\n}\n\nvar server = null;\nconsole.log(\"scanning...\");\n\nbluetooth.requestDevice({\n\tdeviceFound: handleDeviceFound\n})\n.then(device => {\n    console.log(\"connecting...\");\n    return device.gatt.connect();\n})\n.then(gattServer => {\n    console.log(\"connected\");\n    server = gattServer;\n    return enumerateGatt(server);\n})\n.then(() => server.disconnect())\n.then(() => {\n    console.log(\"\\ndisconnected\");\n    process.exit();\n})\n.catch(logError);\n*/\n"],"sourceRoot":"../../src"}