{"version":3,"sources":["examples/heartrate.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqDE","file":"heartrate.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/*\nvar bluetooth = require('../index').webbluetooth;\nvar gattServer;\nvar heartChar;\n\nfunction log(message) {\n\tconsole.log(message);\n}\n\nlog('Requesting Bluetooth Devices...');\nbluetooth.requestDevice({\n\tfilters:[{ services:[ \"heart_rate\" ] }]\n})\n.then(device => {\n\tlog('Found device: ' + device.name);\n\treturn device.gatt.connect();\n})\n.then(server => {\n\tgattServer = server;\n\tlog('Gatt server connected: ' + gattServer.connected);\n\treturn gattServer.getPrimaryService(\"heart_rate\");\n})\n.then(service => {\n\tlog('Primary service: ' + service.uuid);\n\treturn service.getCharacteristic(\"heart_rate_measurement\");\n})\n.then(characteristic => {\n\tlog('Characteristic: ' + characteristic.uuid);\n\theartChar = characteristic;\n\treturn heartChar.getDescriptors();\n})\n.then(descriptors => {\n\tdescriptors.forEach(descriptor => {\n\t\tlog('Descriptor: ' + descriptor.uuid);\n\t});\n\n\treturn Array.apply(null, Array(10)).reduce(sequence => {\n\t\treturn sequence.then(() => {\n\t\t\treturn heartChar.readValue();\n\t\t}).then(value => {\n\t\t\tlog('Value: ' + value.getUint16(0));\n\t\t});\n\t}, Promise.resolve());\n})\n.then(() => {\n\tgattServer.disconnect();\n\tlog('Gatt server connected: ' + gattServer.connected);\n\tprocess.exit();\n})\n.catch(error => {\n\tlog(error);\n\tprocess.exit();\n});\n*/\n"],"sourceRoot":"../../src"}