{"version":3,"sources":["service.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAEF;CACC;AADD,gEACC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+FE","file":"service.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nexport class BluetoothRemoteGATTService {\n}\n\n/*\n    // BluetoothRemoteGATTService Object\n    var BluetoothRemoteGATTService = function(properties) {\n        this._handle = null;\n        this._services = null;\n        this._characteristics = null;\n\n        this.device = null;\n        this.uuid = null;\n        this.isPrimary = false;\n\n        mergeDictionary(this, properties);\n        this.dispatchEvent({ type: \"serviceadded\", bubbles: true });\n    };\n    BluetoothRemoteGATTService.prototype.getCharacteristic = function(characteristicUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.device.gatt.connected) return reject(\"getCharacteristic error: device not connected\");\n            if (!characteristicUUID) return reject(\"getCharacteristic error: no characteristic specified\");\n\n            this.getCharacteristics(characteristicUUID)\n            .then(function(characteristics) {\n                if (characteristics.length !== 1) return reject(\"getCharacteristic error: characteristic not found\");\n                resolve(characteristics[0]);\n            })\n            .catch(function(error) {\n                reject(error);\n            });\n        }.bind(this));\n    };\n    BluetoothRemoteGATTService.prototype.getCharacteristics = function(characteristicUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.device.gatt.connected) return reject(\"getCharacteristics error: device not connected\");\n\n            function complete() {\n                if (!characteristicUUID) return resolve(this._characteristics);\n                var filtered = this._characteristics.filter(function(characteristic) {\n                    return (characteristic.uuid === helpers.getCharacteristicUUID(characteristicUUID));\n                });\n                if (filtered.length !== 1) return reject(\"getCharacteristics error: characteristic not found\");\n                resolve(filtered);\n            }\n            if (this._characteristics) return complete.call(this);\n            adapter.discoverCharacteristics(this._handle, [], function(characteristics) {\n                this._characteristics = characteristics.map(function(characteristicInfo) {\n                    characteristicInfo.service = this;\n                    return new BluetoothRemoteGATTCharacteristic(characteristicInfo);\n                }.bind(this));\n                complete.call(this);\n            }.bind(this), wrapReject(reject, \"getCharacteristics error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTService.prototype.getIncludedService = function(serviceUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.device.gatt.connected) return reject(\"getIncludedService error: device not connected\");\n            if (!serviceUUID) return reject(\"getIncludedService error: no service specified\");\n\n            this.getIncludedServices(serviceUUID)\n            .then(function(services) {\n                if (services.length !== 1) return reject(\"getIncludedService error: service not found\");\n                resolve(services[0]);\n            })\n            .catch(function(error) {\n                reject(error);\n            });\n        }.bind(this));\n    };\n    BluetoothRemoteGATTService.prototype.getIncludedServices = function(serviceUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.device.gatt.connected) return reject(\"getIncludedServices error: device not connected\");\n\n            function complete() {\n                if (!serviceUUID) return resolve(this._services);\n                var filtered = this._services.filter(function(service) {\n                    return (service.uuid === helpers.getServiceUUID(serviceUUID));\n                });\n                if (filtered.length !== 1) return reject(\"getIncludedServices error: service not found\");\n                resolve(filtered);\n            }\n            if (this._services) return complete.call(this);\n            adapter.discoverIncludedServices(this._handle, this.device._allowedServices, function(services) {\n                this._services = services.map(function(serviceInfo) {\n                    serviceInfo.device = this.device;\n                    return new BluetoothRemoteGATTService(serviceInfo);\n                }.bind(this));\n                complete.call(this);\n            }.bind(this), wrapReject(reject, \"getIncludedServices error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTService.prototype.addEventListener = createListenerFn([\n        \"serviceadded\",\n        \"servicechanged\",\n        \"serviceremoved\"\n    ]);\n    BluetoothRemoteGATTService.prototype.removeEventListener = removeEventListener;\n    BluetoothRemoteGATTService.prototype.dispatchEvent = dispatchEvent;\n*/\n"],"sourceRoot":"../src"}