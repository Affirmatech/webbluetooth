{"version":3,"sources":["characteristic.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAEF;CACC;AADD,8EACC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6GE","file":"characteristic.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nexport class BluetoothRemoteGATTCharacteristic {\n}\n\n/*\n    // BluetoothRemoteGATTCharacteristic Object\n    var BluetoothRemoteGATTCharacteristic = function(properties) {\n        this._handle = null;\n        this._descriptors = null;\n\n        this.service = null;\n        this.uuid = null;\n        this.properties = {\n            broadcast: false,\n            read: false,\n            writeWithoutResponse: false,\n            write: false,\n            notify: false,\n            indicate: false,\n            authenticatedSignedWrites: false,\n            reliableWrite: false,\n            writableAuxiliaries: false\n        };\n        this.value = null;\n\n        mergeDictionary(this, properties);\n    };\n    BluetoothRemoteGATTCharacteristic.prototype.getDescriptor = function(descriptorUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.service.device.gatt.connected) return reject(\"getDescriptor error: device not connected\");\n            if (!descriptorUUID) return reject(\"getDescriptor error: no descriptor specified\");\n\n            this.getDescriptors(descriptorUUID)\n            .then(function(descriptors) {\n                if (descriptors.length !== 1) return reject(\"getDescriptor error: descriptor not found\");\n                resolve(descriptors[0]);\n            })\n            .catch(function(error) {\n                reject(error);\n            });\n        }.bind(this));\n    };\n    BluetoothRemoteGATTCharacteristic.prototype.getDescriptors = function(descriptorUUID) {\n        return new Promise(function(resolve, reject) {\n            if (!this.service.device.gatt.connected) return reject(\"getDescriptors error: device not connected\");\n\n            function complete() {\n                if (!descriptorUUID) return resolve(this._descriptors);\n                var filtered = this._descriptors.filter(function(descriptor) {\n                    return (descriptor.uuid === helpers.getDescriptorUUID(descriptorUUID));\n                });\n                if (filtered.length !== 1) return reject(\"getDescriptors error: descriptor not found\");\n                resolve(filtered);\n            }\n            if (this._descriptors) return complete.call(this);\n            adapter.discoverDescriptors(this._handle, [], function(descriptors) {\n                this._descriptors = descriptors.map(function(descriptorInfo) {\n                    descriptorInfo.characteristic = this;\n                    return new BluetoothRemoteGATTDescriptor(descriptorInfo);\n                }.bind(this));\n                complete.call(this);\n            }.bind(this), wrapReject(reject, \"getDescriptors error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTCharacteristic.prototype.readValue = function() {\n        return new Promise(function(resolve, reject) {\n            if (!this.service.device.gatt.connected) return reject(\"readValue error: device not connected\");\n\n            adapter.readCharacteristic(this._handle, function(dataView) {\n                this.value = dataView;\n                resolve(dataView);\n                this.dispatchEvent({ type: \"characteristicvaluechanged\", bubbles: true });\n            }.bind(this), wrapReject(reject, \"readValue error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTCharacteristic.prototype.writeValue = function(bufferSource) {\n        return new Promise(function(resolve, reject) {\n            if (!this.service.device.gatt.connected) return reject(\"writeValue error: device not connected\");\n\n            var arrayBuffer = bufferSource.buffer || bufferSource;\n            var dataView = new DataView(arrayBuffer);\n            adapter.writeCharacteristic(this._handle, dataView, function() {\n                this.value = dataView;\n                resolve();\n            }.bind(this), wrapReject(reject, \"writeValue error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTCharacteristic.prototype.startNotifications = function() {\n        return new Promise(function(resolve, reject) {\n            if (!this.service.device.gatt.connected) return reject(\"startNotifications error: device not connected\");\n\n            adapter.enableNotify(this._handle, function(dataView) {\n                this.value = dataView;\n                this.dispatchEvent({ type: \"characteristicvaluechanged\", bubbles: true });\n            }.bind(this), function() {\n                resolve(this);\n            }.bind(this), wrapReject(reject, \"startNotifications error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTCharacteristic.prototype.stopNotifications = function() {\n        return new Promise(function(resolve, reject) {\n            if (!this.service.device.gatt.connected) return reject(\"stopNotifications error: device not connected\");\n\n            adapter.disableNotify(this._handle, function() {\n                resolve(this);\n            }.bind(this), wrapReject(reject, \"stopNotifications error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTCharacteristic.prototype.addEventListener = createListenerFn([\n        \"characteristicvaluechanged\"\n    ]);\n    BluetoothRemoteGATTCharacteristic.prototype.removeEventListener = removeEventListener;\n    BluetoothRemoteGATTCharacteristic.prototype.dispatchEvent = dispatchEvent;\n*/\n"],"sourceRoot":"../src"}