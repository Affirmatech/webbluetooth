{"version":3,"sources":["descriptor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAEF;CACC;AADD,sEACC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCE","file":"descriptor.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nexport class BluetoothRemoteGATTDescriptor {\n}\n\n/*\n    // BluetoothRemoteGATTDescriptor Object\n    var BluetoothRemoteGATTDescriptor = function(properties) {\n        this._handle = null;\n\n        this.characteristic = null;\n        this.uuid = null;\n        this.value = null;\n\n        mergeDictionary(this, properties);\n    };\n    BluetoothRemoteGATTDescriptor.prototype.readValue = function() {\n        return new Promise(function(resolve, reject) {\n            if (!this.characteristic.service.device.gatt.connected) return reject(\"readValue error: device not connected\");\n\n            adapter.readDescriptor(this._handle, function(dataView) {\n                this.value = dataView;\n                resolve(dataView);\n            }.bind(this), wrapReject(reject, \"readValue error\"));\n        }.bind(this));\n    };\n    BluetoothRemoteGATTDescriptor.prototype.writeValue = function(bufferSource) {\n        return new Promise(function(resolve, reject) {\n            if (!this.characteristic.service.device.gatt.connected) return reject(\"writeValue error: device not connected\");\n\n            var arrayBuffer = bufferSource.buffer || bufferSource;\n            var dataView = new DataView(arrayBuffer);\n            adapter.writeDescriptor(this._handle, dataView, function() {\n                this.value = dataView;\n                resolve();\n            }.bind(this), wrapReject(reject, \"writeValue error\"));\n        }.bind(this));\n    };\n*/\n"],"sourceRoot":"../src"}